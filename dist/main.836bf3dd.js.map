{"version":3,"sources":["table.js","utils.js","roll.js","journal.js","main.js"],"names":["distance","exports","name","dice","entries","number","element","roomType","trap","tables","isIterable","obj","Symbol","iterator","rollDie","expression","parts","split","numberOfDice","parseInt","sides","Number","isNaN","Error","concat","total","i","Math","floor","random","rollOnTable","table","result","randomNumber","length","entry","includes","range","lowEnd","highEnd","_table","require","_utils","_interopRequireDefault","_roll","e","__esModule","default","_toConsumableArray","r","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","a","_arrayLikeToArray","t","toString","call","slice","constructor","Array","from","test","isArray","n","parseTable","content","openIndex","indexOf","closeIndex","before","substring","tableName","after","find","button","createRollOnTableButton","console","error","push","document","createTextNode","apply","parseExpression","parseDie","diceExpression","createJournalLine","journal","getElementById","newLine","createElement","appendChild","innerHTML","onclick","clearJournal","_journal","btnClearJournal","log"],"mappings":"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","file":"main.836bf3dd.js","sourceRoot":"..\\src","sourcesContent":["export const distance = {\r\n  name: 'Distance',\r\n  dice: '1d6',\r\n  entries: [\r\n    { number: '1', element: 'Close' },\r\n    { number: '2-3', element: 'Near at #1d3 meter' },\r\n    { number: '4-6', element: 'Far' }],\r\n};\r\n\r\nexport const roomType = {\r\n  name: 'Room Type',\r\n  dice: '1d10',\r\n  entries: [\r\n    { number: '1-2', element: 'Empty' },\r\n    { number: '3', element: '{Trap}' },\r\n    { number: '4', element: 'Minor hazard' },\r\n    { number: '5', element: 'Solo monster' },\r\n    { number: '6', element: 'NPC' },\r\n    { number: '7', element: 'Monster mob' },\r\n    { number: '8', element: 'Major hazard' },\r\n    { number: '9', element: 'Treasure' },\r\n    { number: '10', element: 'Boss monster' },\r\n  ],\r\n};\r\n\r\nexport const trap = {\r\n  name: 'Trap',\r\n  dice: '1d6',\r\n  entries: [\r\n    { number: '1', element: 'Pit' },\r\n    { number: '2', element: 'Poison dart' },\r\n    { number: '3', element: 'Fireball' },\r\n    { number: '4', element: 'Gas' },\r\n    { number: '5', element: 'Blade' },\r\n    { number: '6', element: 'Electricity' },\r\n  ],\r\n};\r\n\r\nexport const tables = [\r\n  distance,\r\n  roomType,\r\n  trap,\r\n];\r\n","export default function isIterable(obj) {\r\n  if (obj == null) {\r\n    return false;\r\n  }\r\n  return typeof obj[Symbol.iterator] === 'function';\r\n}\r\n","export function rollDie(expression) {\r\n  // expression = \"1d6\"\r\n  // expression = \"2d10\"\r\n  // expression = \"1d6+1\"\r\n  // expression = \"1d6 + 1\"\r\n  // expression = \"1d6-1\"\r\n  // expression = \"1d6 - 1\"\r\n  // expression = \"1d6*2\"\r\n  // expression = \"1d6 * 2\"\r\n  // expression = \"1d6/2\"\r\n  // expression = \"1d6 / 2\"\r\n\r\n  const parts = expression.split('d');\r\n  const numberOfDice = parseInt(parts[0], 10);\r\n  const sides = parseInt(parts[1], 10);\r\n\r\n  if (Number.isNaN(sides) || sides <= 0) {\r\n    throw new Error(`Invalid dice sides value: \"${parts[1]}\"`);\r\n  }\r\n\r\n  let total = 0;\r\n  for (let i = 0; i < numberOfDice; i += 1) {\r\n    total += Math.floor(Math.random() * sides) + 1;\r\n  }\r\n  return total;\r\n}\r\n\r\n/**\r\n * Rolls on a table and returns the result.\r\n * @param {Object} table - The table to roll on.\r\n * @param {string} table.dice - The dice expression (e.g., \"1d6\").\r\n * @param {Array} table.entries - The entries of the table.\r\n * @param {string} table.name - The name of the table.\r\n * Each entry in table.entries should have:\r\n *   - {string} number: A single number or a range (e.g., \"1\" or \"1-3\").\r\n *   - {string} element: The result corresponding to the number or range.\r\n */\r\nexport function rollOnTable(table) {\r\n  let result = '';\r\n  const randomNumber = rollDie(table.dice);\r\n  for (let i = 0; i < table.entries.length; i += 1) {\r\n    const entry = table.entries[i];\r\n    if (entry.number.includes('-')) {\r\n      const range = entry.number.split('-');\r\n      const lowEnd = parseInt(range[0], 10);\r\n      const highEnd = parseInt(range[1], 10);\r\n      if (randomNumber >= lowEnd && randomNumber <= highEnd) {\r\n        result = entry.element;\r\n      }\r\n    } else if (parseInt(entry.number, 10) === randomNumber) {\r\n      result = entry.element;\r\n    }\r\n  }\r\n  const fullResult = `Roll on ${table.name}: ${result} (${randomNumber})`;\r\n  return fullResult;\r\n}\r\n","import { tables } from './table';\r\nimport isIterable from './utils';\r\nimport { rollDie, rollOnTable } from './roll';\r\n\r\nfunction parseTable(expression) {\r\n  const content = [];\r\n\r\n  const openIndex = expression.indexOf('{');\r\n  const closeIndex = expression.indexOf('}');\r\n\r\n  const before = expression.substring(0, openIndex);\r\n  const tableName = expression.substring(openIndex + 1, closeIndex);\r\n  const after = expression.substring(closeIndex + 1);\r\n\r\n  const table = tables.find((t) => t.name === tableName);\r\n  let button = null;\r\n  if (!table) {\r\n    console.error(`Table ${tableName} not found`);\r\n  } else {\r\n    button = createRollOnTableButton(table);\r\n  }\r\n\r\n  content.push(document.createTextNode(before));\r\n  content.push(document.createTextNode(tableName));\r\n  if (button) {\r\n    content.push(button);\r\n  }\r\n  if (isIterable(after)) {\r\n    content.push(...parseExpression(after));\r\n  } else {\r\n    content.push(parseExpression(after));\r\n  }\r\n  return content;\r\n}\r\n\r\nexport function parseExpression(expression) {\r\n  for (let i = 0; i < expression.length; i += 1) {\r\n    if (expression[i] === '{') {\r\n      return parseTable(expression);\r\n    } if (expression[i] === '[') {\r\n      return parseDie(expression);\r\n    }\r\n  }\r\n  return [document.createTextNode(expression)];\r\n}\r\n\r\nfunction parseDie(expression) {\r\n  const content = [];\r\n\r\n  const openIndex = expression.indexOf('[');\r\n  const closeIndex = expression.indexOf(']');\r\n\r\n  const before = expression.substring(0, openIndex);\r\n  const diceExpression = expression.substring(openIndex + 1, closeIndex);\r\n  const after = expression.substring(closeIndex + 1);\r\n\r\n  content.push(document.createTextNode(before));\r\n  content.push(document.createTextNode(rollDie(diceExpression)));\r\n  if (isIterable(after)) {\r\n    content.push(...parseExpression(after));\r\n  } else {\r\n    content.push(parseExpression(after));\r\n  }\r\n  return content;\r\n}\r\n\r\nexport function createJournalLine(content) {\r\n  const journal = document.getElementById('journal');\r\n  const newLine = document.createElement('div');\r\n  for (let i = 0; i < content.length; i += 1) {\r\n    newLine.appendChild(content[i]);\r\n  }\r\n  journal.appendChild(newLine);\r\n}\r\n\r\nexport function createRollOnTableButton(table) {\r\n  const button = document.createElement('button');\r\n  button.innerHTML = '<button style=\"display: inline-block\">ROLL</button>';\r\n  button.onclick = function btnFunction() {\r\n    createJournalLine(parseExpression(rollOnTable(table)));\r\n  };\r\n  return button;\r\n}\r\n\r\nexport function clearJournal() {\r\n  const journal = document.getElementById('journal');\r\n  journal.innerHTML = '';\r\n}\r\n","import { createJournalLine, clearJournal, parseExpression } from './journal';\r\n\r\nconst button = document.getElementById('button');\r\nconst btnClearJournal = document.getElementById('clearJournal');\r\n\r\nbutton.onclick = function () {\r\n  const content = parseExpression('roll [1d6] times on table {Trap} and then do something else');\r\n  createJournalLine(content);\r\n};\r\n\r\nbtnClearJournal.onclick = function () {\r\n  console.log('clear journal clicked');\r\n  clearJournal();\r\n};\r\n"]}